---
name: build-alexv-webhook

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - '*'
#      - "v[0-9]+.[0-9]+.[0-9]+"
env:
  SYSDIG_URL: https://us2.app.sysdig.com
  APP_NAME: my-node-test
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2
  
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    
    - name: Docker metadata tag set
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.APP_NAME }}
        tags: |
          type=raw,priority=100,enable=${{ github.event_name == 'push' }},value=${{ steps.get_version.outputs.VERSION }}
        labels: |
          org.opencontainers.image.title=${{ env.APP_NAME }}

    - name: Download Linter
      run: curl -LO "https://github.com/hadolint/hadolint/releases/download/v2.10.0/hadolint-Linux-x86_64"

    - name: Make Linter executable
      run: chmod +x ./hadolint-Linux-x86_64

    - name: Lint Dockerfile
      run: ./hadolint-Linux-x86_64 application/Dockerfile  

    - name: Login to GHCR
      run: docker login ${{ env.REGISTRY }} -u ${{ secrets.REGISTRY_USER }} -p ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build App Image
      run: docker build application --file application/Dockerfile --tag ${{ env.APP_NAME }}:bld-${{ steps.date.outputs.date }}

    - name: Get the New Scanner
      run: curl -LO "https://download.sysdig.com/scanning/bin/sysdig-cli-scanner/$(curl -L -s https://download.sysdig.com/scanning/sysdig-cli-scanner/latest_version.txt)/linux/amd64/sysdig-cli-scanner"

    - name: Make the New Scanner executable
      run: chmod +x ./sysdig-cli-scanner

# Disabled sue to vulnerable image :D LOL.
#    - name: Scan Image with New Scanner
#      env:
#        SECURE_API_TOKEN: ${{ secrets.SYSDIG_API_TOKEN }}
#      run: ./sysdig-cli-scanner --apiurl ${{ env.SYSDIG_URL }} ${{ env.APP_NAME }}:bld-${{ steps.date.outputs.date }}

    - name: Download Goss
      run: curl -L https://goss.rocks/install | sudo sh

    - name: Check Goss
      run: goss --version

    - name: Add Goss to PATH
      run: export PATH="/usr/local/bin/:$PATH"
  
    - name: Execute a Fog test
      env:
        GOSS_FILE: tests/goss.yaml
      run: dgoss run -dit --name ${{ env.APP_NAME }} -p 3000:3000 ${{ env.APP_NAME }}:bld-${{ steps.date.outputs.date }}

    - name: Tag the Image
      run: docker tag ${{ env.APP_NAME }}:bld-${{ steps.date.outputs.date }} ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USER }}/${{ env.APP_NAME }}:dev

    - name: Push the Image
      run: docker push ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USER }}/${{ env.APP_NAME }}:dev

#TODO: Deploy

